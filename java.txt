package helloworld;
class heap{
	int a[];
	int size;
	public heap(int a[]) {
		this.a=a;
		this.size=a.length;		
		buildHeap();
	}
	void buildHeap() {
		for(int i=this.size/2-1;i>=0;i--) {
			heapify(i);
		}
		
	}
	void heapify(int root_index) {
		int max_index=root_index;
	int child=root_index*2+1;
	if(child<size) {
		if(a[size]>a[max_index]) {
			max_index=child;
		}
	}
	if(child+1<size) {
		if(a[child+1]>a[max_index]) {
			max_index=child+1;
		}
	}
	swap(a,max_index,root_index);
	if(root_index!=max_index) {
		heapify(max_index);
	}
	}
	void swap(int[] a, int b, int c) {
		int temp=a[b];
		a[b]=a[c];
		a[c]=temp;		
	}
	int extractRoot() {
		int max=a[0];
		a[0]=a[--size];
		heapify(0);
		return max;
	}
	int getSize() {
		return size;
	}
}
public class MinIntHeap {
	
	public static void main(String[] args) {
		int a[]= new int[]{1,2,4,7,6,5,88,11,22,76};
		heap h=new heap(a);
		while(h.getSize()>0) {
			System.out.print(h.extractRoot()+", ");
		}
	}

}
